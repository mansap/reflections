Q. 1. 
How did viewing a diff between two versions of a file help you see the bug that
was introduced?
Ans: Because of using the diff command, I did not need to go through both the 
documents line by line and could clearly see the difference between the two 
files. Thus, it was very easy to point out.

Q.2.
How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
Ans: By having different versions of my code file, I can understand the 
dofferent mistakes i am making frequently so that I can avoid repeating the 
same. Also, if I want to go back to any of the previous versions, I can 
easily do so because of the presence of all versions.

Q.3.
What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Manual commits: With manual commits, there is a chance for human error to 
take place. Because of which, we may lose some very important information 
at times like power failure. However, if the developer is careful enough, 
manual commits provide the best way to 'logically' perform commits.
Automatically saved: You cannot control the times at which the saves occur, 
and it may result is unecessary saving of too many files with no logical
meaning. However, an advantage is that we wont lose information as there 
is no human error involved.

Q.4.
Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is a version control specifically designed for code. While programming,
tracking multiple files together is most helpful as we can track down 
errors or bugs efficiently. It saves time and a lot of effort.

Q.5.
How can you use the commands git log and git diff to view the history of files?
With git log, I can view the entire history of the changes made in all the
files. With git diff, I can check the differences made between each commits
to better analyse the changes and find any bus/mistakes if any.

Q.6.
How might using version control make you more confident to make changes that
could break something?

Because I can alaways go back and fix somethinh whichI would have 
accidently changed

Q.7.
Now that you have your workspace set up, what do you want to try using Git for?
I want to store all the versions of code that I make for my projects so that
I can know if and when I make errors and also be able to publish my git 
profile.
